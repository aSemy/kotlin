/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.lombok;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link GenerateNewCompilerTests.kt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("plugins/lombok/testData/compile")
@TestDataPath("$PROJECT_ROOT")
public class IrBlackBoxCodegenTestForLombokGenerated extends AbstractIrBlackBoxCodegenTestForLombok {
    @Test
    @TestMetadata("accessorsStripPrefix.kt")
    public void testAccessorsStripPrefix() throws Exception {
        runTest("plugins/lombok/testData/compile/accessorsStripPrefix.kt");
    }

    @Test
    @TestMetadata("accessorsStripPrefixCombined.kt")
    public void testAccessorsStripPrefixCombined() throws Exception {
        runTest("plugins/lombok/testData/compile/accessorsStripPrefixCombined.kt");
    }

    @Test
    @TestMetadata("accessorsStripPrefixConfig.kt")
    public void testAccessorsStripPrefixConfig() throws Exception {
        runTest("plugins/lombok/testData/compile/accessorsStripPrefixConfig.kt");
    }

    @Test
    @TestMetadata("allArgsConstructor.kt")
    public void testAllArgsConstructor() throws Exception {
        runTest("plugins/lombok/testData/compile/allArgsConstructor.kt");
    }

    @Test
    @TestMetadata("allArgsConstructorStatic.kt")
    public void testAllArgsConstructorStatic() throws Exception {
        runTest("plugins/lombok/testData/compile/allArgsConstructorStatic.kt");
    }

    @Test
    public void testAllFilesPresentInCompile() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/lombok/testData/compile"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("clashAccessors.kt")
    public void testClashAccessors() throws Exception {
        runTest("plugins/lombok/testData/compile/clashAccessors.kt");
    }

    @Test
    @TestMetadata("configAccessors.kt")
    public void testConfigAccessors() throws Exception {
        runTest("plugins/lombok/testData/compile/configAccessors.kt");
    }

    @Test
    @TestMetadata("configAccessorsOverride.kt")
    public void testConfigAccessorsOverride() throws Exception {
        runTest("plugins/lombok/testData/compile/configAccessorsOverride.kt");
    }

    @Test
    @TestMetadata("configCaseInsensitive.kt")
    public void testConfigCaseInsensitive() throws Exception {
        runTest("plugins/lombok/testData/compile/configCaseInsensitive.kt");
    }

    @Test
    @TestMetadata("configSimple.kt")
    public void testConfigSimple() throws Exception {
        runTest("plugins/lombok/testData/compile/configSimple.kt");
    }

    @Test
    @TestMetadata("data.kt")
    public void testData() throws Exception {
        runTest("plugins/lombok/testData/compile/data.kt");
    }

    @Test
    @TestMetadata("genericsAccessors.kt")
    public void testGenericsAccessors() throws Exception {
        runTest("plugins/lombok/testData/compile/genericsAccessors.kt");
    }

    @Test
    @TestMetadata("genericsConstructors.kt")
    public void testGenericsConstructors() throws Exception {
        runTest("plugins/lombok/testData/compile/genericsConstructors.kt");
    }

    @Test
    @TestMetadata("genericsConstructorsStatic.kt")
    public void testGenericsConstructorsStatic() throws Exception {
        runTest("plugins/lombok/testData/compile/genericsConstructorsStatic.kt");
    }

    @Test
    @TestMetadata("getters.kt")
    public void testGetters() throws Exception {
        runTest("plugins/lombok/testData/compile/getters.kt");
    }

    @Test
    @TestMetadata("gettersClassLevel.kt")
    public void testGettersClassLevel() throws Exception {
        runTest("plugins/lombok/testData/compile/gettersClassLevel.kt");
    }

    @Test
    @TestMetadata("gettersFluent.kt")
    public void testGettersFluent() throws Exception {
        runTest("plugins/lombok/testData/compile/gettersFluent.kt");
    }

    @Test
    @TestMetadata("noArgsConstructor.kt")
    public void testNoArgsConstructor() throws Exception {
        runTest("plugins/lombok/testData/compile/noArgsConstructor.kt");
    }

    @Test
    @TestMetadata("noArgsConstructorStatic.kt")
    public void testNoArgsConstructorStatic() throws Exception {
        runTest("plugins/lombok/testData/compile/noArgsConstructorStatic.kt");
    }

    @Test
    @TestMetadata("nullability.kt")
    public void testNullability() throws Exception {
        runTest("plugins/lombok/testData/compile/nullability.kt");
    }

    @Test
    @TestMetadata("propertyFromSuper.kt")
    public void testPropertyFromSuper() throws Exception {
        runTest("plugins/lombok/testData/compile/propertyFromSuper.kt");
    }

    @Test
    @TestMetadata("requiredArgsConstructor.kt")
    public void testRequiredArgsConstructor() throws Exception {
        runTest("plugins/lombok/testData/compile/requiredArgsConstructor.kt");
    }

    @Test
    @TestMetadata("requiredArgsConstructorStatic.kt")
    public void testRequiredArgsConstructorStatic() throws Exception {
        runTest("plugins/lombok/testData/compile/requiredArgsConstructorStatic.kt");
    }

    @Test
    @TestMetadata("setters.kt")
    public void testSetters() throws Exception {
        runTest("plugins/lombok/testData/compile/setters.kt");
    }

    @Test
    @TestMetadata("settersClassLevel.kt")
    public void testSettersClassLevel() throws Exception {
        runTest("plugins/lombok/testData/compile/settersClassLevel.kt");
    }

    @Test
    @TestMetadata("settersVariations.kt")
    public void testSettersVariations() throws Exception {
        runTest("plugins/lombok/testData/compile/settersVariations.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() throws Exception {
        runTest("plugins/lombok/testData/compile/simple.kt");
    }

    @Test
    @TestMetadata("value.kt")
    public void testValue() throws Exception {
        runTest("plugins/lombok/testData/compile/value.kt");
    }

    @Test
    @TestMetadata("with.kt")
    public void testWith() throws Exception {
        runTest("plugins/lombok/testData/compile/with.kt");
    }

    @Nested
    @TestMetadata("plugins/lombok/testData/compile/processErrors")
    @TestDataPath("$PROJECT_ROOT")
    public class ProcessErrors {
        @Test
        public void testAllFilesPresentInProcessErrors() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/lombok/testData/compile/processErrors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("annotationTypes.kt")
        public void testAnnotationTypes() throws Exception {
            runTest("plugins/lombok/testData/compile/processErrors/annotationTypes.kt");
        }
    }
}
